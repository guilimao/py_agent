name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'py_agent'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: linux
            executable_name: py_agent
            artifact_name: py_agent-linux
          - os: windows-latest
            target: windows
            executable_name: py_agent.exe
            artifact_name: py_agent-windows
          - os: macos-latest
            target: macos
            executable_name: py_agent
            artifact_name: py_agent-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create build info
      shell: bash
      run: |
        mkdir -p build_info
        echo "Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" > build_info/build_info.txt
        echo "Git Commit: ${{ github.sha }}" >> build_info/build_info.txt
        echo "Git Branch: ${{ github.ref_name }}" >> build_info/build_info.txt
        echo "Build Number: ${{ github.run_number }}" >> build_info/build_info.txt
        echo "Python Version: ${{ env.PYTHON_VERSION }}" >> build_info/build_info.txt
        echo "Target Platform: ${{ matrix.target }}" >> build_info/build_info.txt

    - name: Build executable with PyInstaller
      shell: bash
      run: |
        pyinstaller --onefile \
          --name ${{ matrix.executable_name }} \
          --add-data "config:config" \
          --add-data "build_info:build_info" \
          --hidden-import openai \
          --hidden-import prompt_toolkit \
          --hidden-import chardet \
          --hidden-import json_repair \
          --collect-all prompt_toolkit \
          --collect-all chardet \
          main.py

    - name: Create distribution package
      shell: bash
      run: |
        mkdir -p dist_package/${{ matrix.target }}
        
        # 复制可执行文件
        cp dist/${{ matrix.executable_name }} dist_package/${{ matrix.target }}/
        
        # 复制配置文件
        cp -r config dist_package/${{ matrix.target }}/
        
        # 复制构建信息
        cp -r build_info dist_package/${{ matrix.target }}/
        
        # 创建日志目录
        mkdir -p dist_package/${{ matrix.target }}/logs
        
        # 创建启动脚本
        if [ "${{ matrix.target }}" = "windows" ]; then
          echo "@echo off" > dist_package/${{ matrix.target }}/start.bat
          echo "echo Starting PyAgent..." >> dist_package/${{ matrix.target }}/start.bat
          echo "${{ matrix.executable_name }}" >> dist_package/${{ matrix.target }}/start.bat
          echo "pause" >> dist_package/${{ matrix.target }}/start.bat
        else
          echo "#!/bin/bash" > dist_package/${{ matrix.target }}/start.sh
          echo "echo Starting PyAgent..." >> dist_package/${{ matrix.target }}/start.sh
          echo "chmod +x ${{ matrix.executable_name }}" >> dist_package/${{ matrix.target }}/start.sh
          echo "./${{ matrix.executable_name }}" >> dist_package/${{ matrix.target }}/start.sh
          chmod +x dist_package/${{ matrix.target }}/start.sh
        fi
        
        # 创建README
        cat > dist_package/${{ matrix.target }}/README.txt << EOF
        PyAgent - AI Assistant Command Line Tool
        ======================================
        
        文件结构：
        ├── ${{ matrix.executable_name }}    # 主可执行文件
        ├── config/                        # 配置文件目录
        │   ├── provider_config.json      # API提供商配置
        │   ├── system_prompt.txt         # 系统提示词
        │   ├── conversation_memory.json  # 对话记忆
        │   └── word_count.json           # 词数统计
        ├── logs/                         # 日志文件目录
        ├── build_info/                   # 构建信息
        └── start.${{ matrix.target == 'windows' && 'bat' || 'sh' }}    # 启动脚本
        
        使用方法：
        1. 配置API密钥：编辑 config/provider_config.json
        2. 运行程序：执行 start.${{ matrix.target == 'windows' && 'bat' || 'sh' }}
        3. 或直接运行：./${{ matrix.executable_name }}
        
        环境变量：
        - ARK_API_KEY: 豆包API密钥
        - DEEPSEEK_API_KEY: DeepSeek API密钥
        - DASHSCOPE_API_KEY: 阿里云API密钥
        - HUNYUAN_API_KEY: 腾讯API密钥
        - MOONSHOT_API_KEY: Moonshot API密钥
        
        版本信息：
        构建时间：$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        Git提交：${{ github.sha }}
        构建号：${{ github.run_number }}
        EOF

    - name: Create archive
      shell: bash
      run: |
        cd dist_package
        if [ "${{ matrix.target }}" = "windows" ]; then
          7z a -tzip ../${{ matrix.artifact_name }}.zip ${{ matrix.target }}/
        else
          tar -czf ../${{ matrix.artifact_name }}.tar.gz ${{ matrix.target }}/
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.*
          dist_package/${{ matrix.target }}/
        retention-days: 90

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "artifacts/*/*"
        generateReleaseNotes: true
        makeLatest: true
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## PyAgent - AI Assistant Command Line Tool
          
          自动构建的跨平台版本，包含可执行文件和完整配置。
          
          ### 📦 下载说明
          
          - **py_agent-windows.zip**: Windows 64位版本
          - **py_agent-linux.tar.gz**: Linux 64位版本  
          - **py_agent-macos.tar.gz**: macOS 64位版本
          
          - Git Commit: ${{ github.sha }}
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - Python版本: ${{ env.PYTHON_VERSION }}
          
          ---
